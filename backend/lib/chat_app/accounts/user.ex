defmodule ChatApp.Accounts.User do
  use Ecto.Schema
  import Ecto.Changeset

  @primary_key {:id, :binary_id, autogenerate: true}  # UUID primary key, autogenerated

  schema "users" do
    field :email, :string
    field :first_name, :string
    field :last_name, :string
    field :password, :string
    timestamps(inserted_at: :created_at, updated_at: :updated_at, type: :utc_datetime)
  end

  @doc false
  def changeset(user, attrs) do
    user
    |> cast(attrs, [:first_name, :last_name, :email, :password])
    |> validate_required([:first_name, :last_name, :email, :password])
    |> unique_constraint(:email)
  end

  # Registration changeset is specifically the stuff you want to do when registering, the normal changeset is for later other stuff
  def registration_changeset(user, attrs) do
    user
    |> cast(attrs, [:first_name, :last_name, :email, :password])
    |> validate_required([:first_name, :last_name, :email, :password])
    |> unique_constraint(:email)
    |> encrypt_and_put_password()
  end

  defp encrypt_and_put_password(user) do
    with password <- fetch_field!(user, :password) do
      # Basically says with the password, fetch the field and do something in there
      encrypted_password = Bcrypt.hash_pwd_salt(password, log_rounds: 12)
      put_change(user, :password, encrypted_password)
      # Explained:
      # bcrypt with 12 rounds â€” balanced for security and performance.
      # Then put the encrypted password back into the changeset.
    end
  end
end
